{"ast":null,"code":"import _slicedToArray from \"B:\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState } from \"react\";\nimport { Box, Button, TextField, useMediaQuery, Typography, useTheme } from \"@mui/material\";\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { setLogin } from \"../../state\";\nimport Dropzone from \"react-dropzone\";\nimport Flex from \"components/flex\";\nvar registerSchema = yup.object().shape({\n  firstName: yup.string().required(\"required\"),\n  lastName: yup.string().required(\"required\"),\n  email: yup.string().email(\"invalid email\").required(\"required\"),\n  password: yup.string().required(\"required\"),\n  location: yup.string().required(\"required\"),\n  occupation: yup.string().required(\"required\"),\n  picture: yup.string().required(\"required\")\n});\nvar loginSchema = yup.object().shape({\n  email: yup.string().email(\"invalid email\").required(\"required\"),\n  password: yup.string().required(\"required\")\n});\nvar initialValuesRegister = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  location: \"\",\n  occupation: \"\",\n  picture: \"\"\n};\nvar initialValuesLogin = {\n  email: \"\",\n  password: \"\"\n};\nvar Form = function Form() {\n  var _useState = useState(\"login\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    pageType = _useState2[0],\n    setPageType = _useState2[1];\n  var _useTheme = useTheme(),\n    palette = _useTheme.palette;\n  var dispatch = useDispatch();\n  var navigate = useNavigate();\n  var isNonMobile = useMediaQuery(\"(min-width:600px)\");\n  var isLogin = pageType === \"login\";\n  var isRegister = pageType === \"register\";\n  var handleFormSubmit = async(values, onsubmititpops);\n\n  //   const register = async (values, onSubmitProps) => {\n  //     // this allows us to send form info with image\n  //     const formData = new FormData();\n  //     for (let value in values) {\n  //       formData.append(value, values[value]);\n  //     }\n  //     formData.append(\"picturePath\", values.picture.name);\n\n  //     const savedUserResponse = await fetch(\n  //       \"http://localhost:3001/auth/register\",\n  //       {\n  //         method: \"POST\",\n  //         body: formData,\n  //       }\n  //     );\n  //     const savedUser = await savedUserResponse.json();\n  //     onSubmitProps.resetForm();\n\n  //     if (savedUser) {\n  //       setPageType(\"login\");\n  //     }\n  //   };\n\n  //   const login = async (values, onSubmitProps) => {\n  //     const loggedInResponse = await fetch(\"http://localhost:3001/auth/login\", {\n  //       method: \"POST\",\n  //       headers: { \"Content-Type\": \"application/json\" },\n  //       body: JSON.stringify(values),\n  //     });\n  //     const loggedIn = await loggedInResponse.json();\n  //     onSubmitProps.resetForm();\n  //     if (loggedIn) {\n  //       dispatch(\n  //         setLogin({\n  //           user: loggedIn.user,\n  //           token: loggedIn.token,\n  //         })\n  //       );\n  //       navigate(\"/home\");\n  //     }\n  //   };\n\n  //   const handleFormSubmit = async (values, onSubmitProps) => {\n  //     if (isLogin) await login(values, onSubmitProps);\n  //     if (isRegister) await register(values, onSubmitProps);\n  //   };\n\n  //   return (\n  //     <Formik\n  //       onSubmit={handleFormSubmit}\n  //       initialValues={isLogin ? initialValuesLogin : initialValuesRegister}\n  //       validationSchema={isLogin ? loginSchema : registerSchema}\n  //     >\n  //       {({\n  //         values,\n  //         errors,\n  //         touched,\n  //         handleBlur,\n  //         handleChange,\n  //         handleSubmit,\n  //         setFieldValue,\n  //         resetForm,\n  //       }) => (\n  //         <form onSubmit={handleSubmit}>\n  //           <Box\n  //             display=\"grid\"\n  //             gap=\"30px\"\n  //             gridTemplateColumns=\"repeat(4, minmax(0, 1fr))\"\n  //             sx={{\n  //               \"& > div\": { gridColumn: isNonMobile ? undefined : \"span 4\" },\n  //             }}\n  //           >\n  //             {isRegister && (\n  //               <>\n  //                 <TextField\n  //                   label=\"First Name\"\n  //                   onBlur={handleBlur}\n  //                   onChange={handleChange}\n  //                   value={values.firstName}\n  //                   name=\"firstName\"\n  //                   error={\n  //                     Boolean(touched.firstName) && Boolean(errors.firstName)\n  //                   }\n  //                   helperText={touched.firstName && errors.firstName}\n  //                   sx={{ gridColumn: \"span 2\" }}\n  //                 />\n  //                 <TextField\n  //                   label=\"Last Name\"\n  //                   onBlur={handleBlur}\n  //                   onChange={handleChange}\n  //                   value={values.lastName}\n  //                   name=\"lastName\"\n  //                   error={Boolean(touched.lastName) && Boolean(errors.lastName)}\n  //                   helperText={touched.lastName && errors.lastName}\n  //                   sx={{ gridColumn: \"span 2\" }}\n  //                 />\n  //                 <TextField\n  //                   label=\"Location\"\n  //                   onBlur={handleBlur}\n  //                   onChange={handleChange}\n  //                   value={values.location}\n  //                   name=\"location\"\n  //                   error={Boolean(touched.location) && Boolean(errors.location)}\n  //                   helperText={touched.location && errors.location}\n  //                   sx={{ gridColumn: \"span 4\" }}\n  //                 />\n  //                 <TextField\n  //                   label=\"Occupation\"\n  //                   onBlur={handleBlur}\n  //                   onChange={handleChange}\n  //                   value={values.occupation}\n  //                   name=\"occupation\"\n  //                   error={\n  //                     Boolean(touched.occupation) && Boolean(errors.occupation)\n  //                   }\n  //                   helperText={touched.occupation && errors.occupation}\n  //                   sx={{ gridColumn: \"span 4\" }}\n  //                 />\n  //                 <Box\n  //                   gridColumn=\"span 4\"\n  //                   border={`1px solid ${palette.neutral.medium}`}\n  //                   borderRadius=\"5px\"\n  //                   p=\"1rem\"\n  //                 >\n  //                   <Dropzone\n  //                     acceptedFiles=\".jpg,.jpeg,.png\"\n  //                     multiple={false}\n  //                     onDrop={(acceptedFiles) =>\n  //                       setFieldValue(\"picture\", acceptedFiles[0])\n  //                     }\n  //                   >\n  //                     {({ getRootProps, getInputProps }) => (\n  //                       <Box\n  //                         {...getRootProps()}\n  //                         border={`2px dashed ${palette.primary.main}`}\n  //                         p=\"1rem\"\n  //                         sx={{ \"&:hover\": { cursor: \"pointer\" } }}\n  //                       >\n  //                         <input {...getInputProps()} />\n  //                         {!values.picture ? (\n  //                           <p>Add Picture Here</p>\n  //                         ) : (\n  //                           <Flex>\n  //                             <Typography>{values.picture.name}</Typography>\n  //                             <EditOutlinedIcon />\n  //                           </Flex>\n  //                         )}\n  //                       </Box>\n  //                     )}\n  //                   </Dropzone>\n  //                 </Box>\n  //               </>\n  //             )}\n\n  //             <TextField\n  //               label=\"Email\"\n  //               onBlur={handleBlur}\n  //               onChange={handleChange}\n  //               value={values.email}\n  //               name=\"email\"\n  //               error={Boolean(touched.email) && Boolean(errors.email)}\n  //               helperText={touched.email && errors.email}\n  //               sx={{ gridColumn: \"span 4\" }}\n  //             />\n  //             <TextField\n  //               label=\"Password\"\n  //               type=\"password\"\n  //               onBlur={handleBlur}\n  //               onChange={handleChange}\n  //               value={values.password}\n  //               name=\"password\"\n  //               error={Boolean(touched.password) && Boolean(errors.password)}\n  //               helperText={touched.password && errors.password}\n  //               sx={{ gridColumn: \"span 4\" }}\n  //             />\n  //           </Box>\n\n  //           {/* BUTTONS */}\n  //           <Box>\n  //             <Button\n  //               fullWidth\n  //               type=\"submit\"\n  //               sx={{\n  //                 m: \"2rem 0\",\n  //                 p: \"1rem\",\n  //                 backgroundColor: palette.primary.main,\n  //                 color: palette.background.alt,\n  //                 \"&:hover\": { color: palette.primary.main },\n  //               }}\n  //             >\n  //               {isLogin ? \"LOGIN\" : \"REGISTER\"}\n  //             </Button>\n  //             <Typography\n  //               onClick={() => {\n  //                 setPageType(isLogin ? \"register\" : \"login\");\n  //                 resetForm();\n  //               }}\n  //               sx={{\n  //                 textDecoration: \"underline\",\n  //                 color: palette.primary.main,\n  //                 \"&:hover\": {\n  //                   cursor: \"pointer\",\n  //                   color: palette.primary.light,\n  //                 },\n  //               }}\n  //             >\n  //               {isLogin\n  //                 ? \"Don't have an account? Sign Up here.\"\n  //                 : \"Already have an account? Login here.\"}\n  //             </Typography>\n  //           </Box>\n  //         </form>\n  //       )}\n  //     </Formik>\n  //   );\n};\n\nexport default Form;","map":{"version":3,"names":["useState","Box","Button","TextField","useMediaQuery","Typography","useTheme","EditOutlinedIcon","Formik","yup","useNavigate","useDispatch","setLogin","Dropzone","Flex","registerSchema","object","shape","firstName","string","required","lastName","email","password","location","occupation","picture","loginSchema","initialValuesRegister","initialValuesLogin","Form","_useState","_useState2","_slicedToArray","pageType","setPageType","_useTheme","palette","dispatch","navigate","isNonMobile","isLogin","isRegister","handleFormSubmit","async","values","onsubmititpops"],"sources":["B:/client/src/scenes/loginPage/Form.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  useMediaQuery,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setLogin } from \"../../state\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Flex from \"components/flex\";\r\n\r\nconst registerSchema = yup.object().shape({\r\n  firstName: yup.string().required(\"required\"),\r\n  lastName: yup.string().required(\"required\"),\r\n  email: yup.string().email(\"invalid email\").required(\"required\"),\r\n  password: yup.string().required(\"required\"),\r\n  location: yup.string().required(\"required\"),\r\n  occupation: yup.string().required(\"required\"),\r\n  picture: yup.string().required(\"required\"),\r\n});\r\n\r\nconst loginSchema = yup.object().shape({\r\n  email: yup.string().email(\"invalid email\").required(\"required\"),\r\n  password: yup.string().required(\"required\"),\r\n});\r\n\r\nconst initialValuesRegister = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  email: \"\",\r\n  password: \"\",\r\n  location: \"\",\r\n  occupation: \"\",\r\n  picture: \"\",\r\n};\r\n\r\nconst initialValuesLogin = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst Form = () => {\r\n  const [pageType, setPageType] = useState(\"login\");\r\n  const { palette } = useTheme();\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const isNonMobile = useMediaQuery(\"(min-width:600px)\");\r\n  const isLogin = pageType === \"login\";\r\n  const isRegister = pageType === \"register\";\r\n\r\n  const handleFormSubmit = async(values, onsubmititpops)\r\n\r\n//   const register = async (values, onSubmitProps) => {\r\n//     // this allows us to send form info with image\r\n//     const formData = new FormData();\r\n//     for (let value in values) {\r\n//       formData.append(value, values[value]);\r\n//     }\r\n//     formData.append(\"picturePath\", values.picture.name);\r\n\r\n//     const savedUserResponse = await fetch(\r\n//       \"http://localhost:3001/auth/register\",\r\n//       {\r\n//         method: \"POST\",\r\n//         body: formData,\r\n//       }\r\n//     );\r\n//     const savedUser = await savedUserResponse.json();\r\n//     onSubmitProps.resetForm();\r\n\r\n//     if (savedUser) {\r\n//       setPageType(\"login\");\r\n//     }\r\n//   };\r\n\r\n//   const login = async (values, onSubmitProps) => {\r\n//     const loggedInResponse = await fetch(\"http://localhost:3001/auth/login\", {\r\n//       method: \"POST\",\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//       body: JSON.stringify(values),\r\n//     });\r\n//     const loggedIn = await loggedInResponse.json();\r\n//     onSubmitProps.resetForm();\r\n//     if (loggedIn) {\r\n//       dispatch(\r\n//         setLogin({\r\n//           user: loggedIn.user,\r\n//           token: loggedIn.token,\r\n//         })\r\n//       );\r\n//       navigate(\"/home\");\r\n//     }\r\n//   };\r\n\r\n//   const handleFormSubmit = async (values, onSubmitProps) => {\r\n//     if (isLogin) await login(values, onSubmitProps);\r\n//     if (isRegister) await register(values, onSubmitProps);\r\n//   };\r\n\r\n//   return (\r\n//     <Formik\r\n//       onSubmit={handleFormSubmit}\r\n//       initialValues={isLogin ? initialValuesLogin : initialValuesRegister}\r\n//       validationSchema={isLogin ? loginSchema : registerSchema}\r\n//     >\r\n//       {({\r\n//         values,\r\n//         errors,\r\n//         touched,\r\n//         handleBlur,\r\n//         handleChange,\r\n//         handleSubmit,\r\n//         setFieldValue,\r\n//         resetForm,\r\n//       }) => (\r\n//         <form onSubmit={handleSubmit}>\r\n//           <Box\r\n//             display=\"grid\"\r\n//             gap=\"30px\"\r\n//             gridTemplateColumns=\"repeat(4, minmax(0, 1fr))\"\r\n//             sx={{\r\n//               \"& > div\": { gridColumn: isNonMobile ? undefined : \"span 4\" },\r\n//             }}\r\n//           >\r\n//             {isRegister && (\r\n//               <>\r\n//                 <TextField\r\n//                   label=\"First Name\"\r\n//                   onBlur={handleBlur}\r\n//                   onChange={handleChange}\r\n//                   value={values.firstName}\r\n//                   name=\"firstName\"\r\n//                   error={\r\n//                     Boolean(touched.firstName) && Boolean(errors.firstName)\r\n//                   }\r\n//                   helperText={touched.firstName && errors.firstName}\r\n//                   sx={{ gridColumn: \"span 2\" }}\r\n//                 />\r\n//                 <TextField\r\n//                   label=\"Last Name\"\r\n//                   onBlur={handleBlur}\r\n//                   onChange={handleChange}\r\n//                   value={values.lastName}\r\n//                   name=\"lastName\"\r\n//                   error={Boolean(touched.lastName) && Boolean(errors.lastName)}\r\n//                   helperText={touched.lastName && errors.lastName}\r\n//                   sx={{ gridColumn: \"span 2\" }}\r\n//                 />\r\n//                 <TextField\r\n//                   label=\"Location\"\r\n//                   onBlur={handleBlur}\r\n//                   onChange={handleChange}\r\n//                   value={values.location}\r\n//                   name=\"location\"\r\n//                   error={Boolean(touched.location) && Boolean(errors.location)}\r\n//                   helperText={touched.location && errors.location}\r\n//                   sx={{ gridColumn: \"span 4\" }}\r\n//                 />\r\n//                 <TextField\r\n//                   label=\"Occupation\"\r\n//                   onBlur={handleBlur}\r\n//                   onChange={handleChange}\r\n//                   value={values.occupation}\r\n//                   name=\"occupation\"\r\n//                   error={\r\n//                     Boolean(touched.occupation) && Boolean(errors.occupation)\r\n//                   }\r\n//                   helperText={touched.occupation && errors.occupation}\r\n//                   sx={{ gridColumn: \"span 4\" }}\r\n//                 />\r\n//                 <Box\r\n//                   gridColumn=\"span 4\"\r\n//                   border={`1px solid ${palette.neutral.medium}`}\r\n//                   borderRadius=\"5px\"\r\n//                   p=\"1rem\"\r\n//                 >\r\n//                   <Dropzone\r\n//                     acceptedFiles=\".jpg,.jpeg,.png\"\r\n//                     multiple={false}\r\n//                     onDrop={(acceptedFiles) =>\r\n//                       setFieldValue(\"picture\", acceptedFiles[0])\r\n//                     }\r\n//                   >\r\n//                     {({ getRootProps, getInputProps }) => (\r\n//                       <Box\r\n//                         {...getRootProps()}\r\n//                         border={`2px dashed ${palette.primary.main}`}\r\n//                         p=\"1rem\"\r\n//                         sx={{ \"&:hover\": { cursor: \"pointer\" } }}\r\n//                       >\r\n//                         <input {...getInputProps()} />\r\n//                         {!values.picture ? (\r\n//                           <p>Add Picture Here</p>\r\n//                         ) : (\r\n//                           <Flex>\r\n//                             <Typography>{values.picture.name}</Typography>\r\n//                             <EditOutlinedIcon />\r\n//                           </Flex>\r\n//                         )}\r\n//                       </Box>\r\n//                     )}\r\n//                   </Dropzone>\r\n//                 </Box>\r\n//               </>\r\n//             )}\r\n\r\n//             <TextField\r\n//               label=\"Email\"\r\n//               onBlur={handleBlur}\r\n//               onChange={handleChange}\r\n//               value={values.email}\r\n//               name=\"email\"\r\n//               error={Boolean(touched.email) && Boolean(errors.email)}\r\n//               helperText={touched.email && errors.email}\r\n//               sx={{ gridColumn: \"span 4\" }}\r\n//             />\r\n//             <TextField\r\n//               label=\"Password\"\r\n//               type=\"password\"\r\n//               onBlur={handleBlur}\r\n//               onChange={handleChange}\r\n//               value={values.password}\r\n//               name=\"password\"\r\n//               error={Boolean(touched.password) && Boolean(errors.password)}\r\n//               helperText={touched.password && errors.password}\r\n//               sx={{ gridColumn: \"span 4\" }}\r\n//             />\r\n//           </Box>\r\n\r\n//           {/* BUTTONS */}\r\n//           <Box>\r\n//             <Button\r\n//               fullWidth\r\n//               type=\"submit\"\r\n//               sx={{\r\n//                 m: \"2rem 0\",\r\n//                 p: \"1rem\",\r\n//                 backgroundColor: palette.primary.main,\r\n//                 color: palette.background.alt,\r\n//                 \"&:hover\": { color: palette.primary.main },\r\n//               }}\r\n//             >\r\n//               {isLogin ? \"LOGIN\" : \"REGISTER\"}\r\n//             </Button>\r\n//             <Typography\r\n//               onClick={() => {\r\n//                 setPageType(isLogin ? \"register\" : \"login\");\r\n//                 resetForm();\r\n//               }}\r\n//               sx={{\r\n//                 textDecoration: \"underline\",\r\n//                 color: palette.primary.main,\r\n//                 \"&:hover\": {\r\n//                   cursor: \"pointer\",\r\n//                   color: palette.primary.light,\r\n//                 },\r\n//               }}\r\n//             >\r\n//               {isLogin\r\n//                 ? \"Don't have an account? Sign Up here.\"\r\n//                 : \"Already have an account? Login here.\"}\r\n//             </Typography>\r\n//           </Box>\r\n//         </form>\r\n//       )}\r\n//     </Formik>\r\n//   );\r\n};\r\n\r\nexport default Form;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SACEC,GAAG,EACHC,MAAM,EACNC,SAAS,EACTC,aAAa,EACbC,UAAU,EACVC,QAAQ,QACH,eAAe;AACtB,OAAOC,gBAAgB,MAAM,kCAAkC;AAC/D,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,IAAI,MAAM,iBAAiB;AAElC,IAAMC,cAAc,GAAGN,GAAG,CAACO,MAAM,EAAE,CAACC,KAAK,CAAC;EACxCC,SAAS,EAAET,GAAG,CAACU,MAAM,EAAE,CAACC,QAAQ,CAAC,UAAU,CAAC;EAC5CC,QAAQ,EAAEZ,GAAG,CAACU,MAAM,EAAE,CAACC,QAAQ,CAAC,UAAU,CAAC;EAC3CE,KAAK,EAAEb,GAAG,CAACU,MAAM,EAAE,CAACG,KAAK,CAAC,eAAe,CAAC,CAACF,QAAQ,CAAC,UAAU,CAAC;EAC/DG,QAAQ,EAAEd,GAAG,CAACU,MAAM,EAAE,CAACC,QAAQ,CAAC,UAAU,CAAC;EAC3CI,QAAQ,EAAEf,GAAG,CAACU,MAAM,EAAE,CAACC,QAAQ,CAAC,UAAU,CAAC;EAC3CK,UAAU,EAAEhB,GAAG,CAACU,MAAM,EAAE,CAACC,QAAQ,CAAC,UAAU,CAAC;EAC7CM,OAAO,EAAEjB,GAAG,CAACU,MAAM,EAAE,CAACC,QAAQ,CAAC,UAAU;AAC3C,CAAC,CAAC;AAEF,IAAMO,WAAW,GAAGlB,GAAG,CAACO,MAAM,EAAE,CAACC,KAAK,CAAC;EACrCK,KAAK,EAAEb,GAAG,CAACU,MAAM,EAAE,CAACG,KAAK,CAAC,eAAe,CAAC,CAACF,QAAQ,CAAC,UAAU,CAAC;EAC/DG,QAAQ,EAAEd,GAAG,CAACU,MAAM,EAAE,CAACC,QAAQ,CAAC,UAAU;AAC5C,CAAC,CAAC;AAEF,IAAMQ,qBAAqB,GAAG;EAC5BV,SAAS,EAAE,EAAE;EACbG,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,EAAE;EACZC,UAAU,EAAE,EAAE;EACdC,OAAO,EAAE;AACX,CAAC;AAED,IAAMG,kBAAkB,GAAG;EACzBP,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE;AACZ,CAAC;AAED,IAAMO,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS;EAAA,IAAAC,SAAA,GACe/B,QAAQ,CAAC,OAAO,CAAC;IAAAgC,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA1CG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAAA,IAAAI,SAAA,GACR9B,QAAQ,EAAE;IAAtB+B,OAAO,GAAAD,SAAA,CAAPC,OAAO;EACf,IAAMC,QAAQ,GAAG3B,WAAW,EAAE;EAC9B,IAAM4B,QAAQ,GAAG7B,WAAW,EAAE;EAC9B,IAAM8B,WAAW,GAAGpC,aAAa,CAAC,mBAAmB,CAAC;EACtD,IAAMqC,OAAO,GAAGP,QAAQ,KAAK,OAAO;EACpC,IAAMQ,UAAU,GAAGR,QAAQ,KAAK,UAAU;EAE1C,IAAMS,gBAAgB,GAAGC,KAAK,CAACC,MAAM,EAAEC,cAAc,CAAC;;EAExeAAehB,IAAI"},"metadata":{},"sourceType":"module"}